/* How to reset all elements */
*,
*::before,
*::after {
    box-sizing: inherit;
    margin: 0;
    padding: 0;
}

html {
    /* Establecer el font-size del html en px es una mala práctica porque
       sobreescribimos el valor y le quitamos al usuario la capacidad
       de reescalar para ver mejor */
    /* font-size: 10px; */
    /* Lo correcto es hacerlo en % */
    
    font-size: 62.5%; // 1 rem = 10px; 10px/16px = 62.5%

    /* Ahora si todo está en REM, con tan solo modificar este valor,
       toda nuestra UI se reescalará */


    /* Aquí le estamos pasando al mixin un bloque de código como argumento
       En desktop first los breakpoints más grandes van primero, exceptuando 
       a big-desktop que tiene min-width. De esta manera logramos que no se 
       sobreescriban los valores. En el caso de mobile first el orden sería inverso.
    */
    @include respond(tab-land) { // width < 1200px
        font-size: 56.5%;    // 1 rem = 9px; 9px/16px = 56.25%
    }

    @include respond(tab-port) { // width < 900px
        font-size: 50%;       // 1 rem = 8px; 8px/16px = 50%
    }

    @include respond(big-desktop) { // width > 1800px
        font-size: 75%;     // 1 rem = 12px; 12px/16px = 75%
    }
}

body {
    /* Es una buena práctica colocar esta propiedad en el body y que
    el resto de elementos la herede. */
    box-sizing: border-box;
    padding: 3rem;

    @include respond(tab-port) {
        padding: 0;
    }
}

/* Solo coloca el width y el heigth cuando son estrictamente necesarios
   Tiene un muy buen entendimiento del display */

::selection {
    background-color: $cl-primary;
    color: $cl-white;
}